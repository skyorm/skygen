package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/skyorm/skygen/gen"
)

func main() {
	wd, err := os.Getwd()
	if err != nil {
		fmt.Printf("skygen: failed to get working directory: %v", err)
		os.Exit(1)
	}
	file := os.Getenv("GOFILE")
	pack := os.Getenv("GOPACKAGE")
	if file != "" && pack != "" {
		if err = processFile(wd, file, pack); err != nil {
			fmt.Printf("skygen: %v\n", err)
			os.Exit(1)
		}
	}
}

func processFile(path, file, pack string) error {
	fmt.Printf("skygen: path=%q file=%q pack=%q\n", path, file, pack)
	structs, err := gen.File(filepath.Join(path, file))
	if err != nil {
		return err
	}
	if len(structs) == 0 {
		return nil
	}
	ext := filepath.Ext(file)
	base := strings.TrimSuffix(file, ext)
	outFile := filepath.Join(path, base+"_sky"+ext)
	f, err := os.Create(outFile)
	if err != nil {
		return err
	}
	defer func() {
		_ = f.Close()
	}()
	if _, err = f.WriteString("// Code generated by github.com/skyorm/skygen. DO NOT EDIT.\n"); err != nil {
		return err
	}
	if _, err = f.WriteString("package " + pack + "\n"); err != nil {
		return err
	}
	if err = headerTemplate.Execute(f, nil); err != nil {
		return err
	}
	for _, str := range structs {
		if !str.HasPK() {
			return fmt.Errorf("struct %s has no pk defined",
				str.Type)
		}
		if err = structTemplate.Execute(f, &str); err != nil {
			return err
		}
	}
	if err = f.Close(); err != nil {
		return err
	}
	gofmt(outFile)
	return nil
}

func gofmt(path string) {
	cmd := exec.Command("gofmt", "-w", path)
	if _, err := cmd.CombinedOutput(); err != nil {
		fmt.Printf("skygen: gofmt error: %v", err)
	}
}

var (
	headerTemplate = template.Must(template.New("header").Parse(`
import (
	"github.com/skyorm/skyorm"
)
`))

	structTemplate = template.Must(template.New("struct").Parse(`
var (
	// {{ .Type }}Store represents skyorm.Store for {{ .Type }} struct.
	{{ .Type }}Store = skyorm.NewStore(
		"{{ .StoreName }}",
		{{ .PkIndex }},
		func() skyorm.Model { return new({{ .Type }}) },
		{{- range $i, $f := .Fields }}
		skyorm.NewProp("{{ $f.Column }}", "{{ $f.Type }}", {{ $f.IsPK }}),
		{{- end }}
	)
)

// OrmStore implements skyorm.Store interface.
func(m *{{ .Type }}) OrmStore() skyorm.Store {
	return {{ .Type }}Store
}

// OrmPk implements skyorm.Store interface.
func(m *{{ .Type }}) OrmPk() interface{} {
	return m.{{ .PKField.Name }}
}

// OrmPkPointer implements skyorm.Store interface.
func(m *{{ .Type }}) OrmPkPointer() interface{} {
	return &m.{{ .PKField.Name }}
}

// OrmPkProp implements skyorm.Store interface.
func(m *{{ .Type }}) OrmPkProp() skyorm.Prop {
	return {{ .Type }}Store.Pk()
}

// OrmProps implements skyorm.Store interface.
func(m *{{ .Type }}) OrmProps() []skyorm.Prop {
	return {{ .Type }}Store.Props()
}

// OrmPointers implements skyorm.Store interface.
func(m *{{ .Type }}) OrmPointers() []interface{} {
	return []interface{}{
		{{- range $i, $f := .Fields }}
		&m.{{ $f.Name }},
		{{- end }}
	}
}

// OrmVals implements skyorm.Store interface.
func(m *{{ .Type }}) OrmVals() []interface{} {
	return []interface{}{
		{{- range $i, $f := .Fields }}
		m.{{ $f.Name }},
		{{- end }}
	}
}

{{ $t := .Type }}
{{- range $i, $f := .Fields }}
// {{ $f.Name }}Prop returns skyorm.Prop for m.{{ $f.Name }} field.
func(m *{{ $t }}) {{ $f.Name }}Prop() skyorm.Prop {
	return m.OrmProps()[{{ $i }}]
}
{{- end }}
`))
)
